package entities;

import static utilz.Constaints.Playerconstaints.ATTACK_1;
import static utilz.Constaints.Playerconstaints.GetSpriteAmount;
import static utilz.Constaints.Playerconstaints.IDLE;
import static utilz.Constaints.Playerconstaints.RUNNING;

import java.awt.Graphics;
import java.awt.image.BufferedImage;

import utilz.LoadSave;
public class Player extends Entity {

	private BufferedImage[][] animations;
	// tốc độ hoạt ảnh
	private int aniTick, aniIndex, aniSpeed = 15;
	private int playerAction = IDLE;
	private int playerDir = -1;
	private boolean moving = false, attacking = false;
	private boolean left, up, right, down;
	private float playerSpeed = 2.0f;

	public Player(float x, float y) {
		super(x, y);
		loadAnimation();
	}

	public void update() {
		updatePos();
		updateAnimation();
		setAnimation();
	}

	public void render(Graphics g) {
		g.drawImage(animations[playerAction][aniIndex], (int) x, (int) y, width, height, null);
	}

	private void loadAnimation() {
			BufferedImage img = LoadSave.GetSpriteAtlas(LoadSave.PLAYER_ATLAS);
			animations = new BufferedImage[9][6];
			for (int j = 0; j < animations.length; j++) {
				for (int i = 0; i < animations[j].length; i++) {
					animations[j][i] = img.getSubimage(i * 64, j * 40, 64, 40);
				}
			}

	}


	public void setRectPos(int x, int y) {
		this.x = x;
		this.y = y;
	}

//	public void spawRect(int x, int y) {
//		rects.add(new MyRect(x, y));
//	}

	private void updateAnimation() {
		aniTick++;
		if (aniTick > aniSpeed) {
			aniTick = 0;
			aniIndex++;
			if (aniIndex >= GetSpriteAmount(playerAction)) {
				aniIndex = 0;
				attacking = false;
			}
		}

	}

	private void setAnimation() {
		int startAni = playerAction;
		
		if (moving) {
			playerAction = RUNNING;
		} else {
			playerAction = IDLE;
		}
		
		if(attacking) {
			playerAction = ATTACK_1;
		}
		if(startAni != playerAction) {
			resetAniTick();
		}

	}
	private void resetAniTick() {
		aniTick = 0;
		aniIndex = 0;
	}

	private void updatePos() {
		
		moving =false;
		if(left && !right) {
			x-=playerSpeed;
			moving = true;
		}else if(right && !left) {
			x+=playerSpeed;
			moving = true;
		}
		if(up && !down) {
			y-=playerSpeed;
			moving = true;
		}else if(down && !left) {
			y+=playerSpeed;
			moving = true;
		}
	}

	public void resetDirBooleans() {
		left = false;
		right = false;
		up = false;
		down = false;
	}
	
	public void setAttacking(boolean attacking) {
		this.attacking = attacking;
	}
	public boolean isLeft() {
		return left;
	}

	public void setLeft(boolean left) {
		this.left = left;
	}

	public boolean isUp() {
		return up;
	}

	public void setUp(boolean up) {
		this.up = up;
	}

	public boolean isRight() {
		return right;
	}

	public void setRight(boolean right) {
		this.right = right;
	}

	public boolean isDown() {
		return down;
	}

	public void setDown(boolean down) {
		this.down = down;
	}

	

}
